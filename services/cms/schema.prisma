// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
  output   = "/Users/v.shustov/WebstormProjects/monorepo/node_modules/.myprisma/client"
}

model User {
  id          String       @id @default(cuid())
  username    String       @unique @default("")
  email       String       @unique @default("")
  phoneNumber String       @unique @default("")
  password    String
  role        String       @default("admin")
  createdAt   DateTime?    @default(now())
  profile     UserProfile? @relation("User_profile", fields: [profileId], references: [id])
  profileId   String?      @unique @map("profile")
  cvs         CV[]         @relation("CV_user")
  posts       Post[]       @relation("Post_author")
  stories     Story[]      @relation("Story_author")
  documents   Document[]   @relation("Document_owner")
}

model UserProfile {
  id                String        @id @default(cuid())
  firstName         String        @default("")
  lastName          String        @default("")
  middleName        String        @default("")
  bio               String        @default("")
  birth             String?
  photo_id          String?
  photo_filesize    Int?
  photo_width       Int?
  photo_height      Int?
  photo_extension   String?
  starsCount        Int?
  reviewsCount      Int?
  competitionLevel  Int?
  competitionPoints Int?
  user              User?         @relation("User_profile")
  achievements      Achievement[] @relation("Achievement_profile")
}

model Achievement {
  id          String       @id @default(cuid())
  title       String       @default("")
  description String       @default("")
  profile     UserProfile? @relation("Achievement_profile", fields: [profileId], references: [id])
  profileId   String?      @map("profile")

  @@index([profileId])
}

model Document {
  id        String    @id @default(cuid())
  title     String    @default("")
  content   String?
  createdAt DateTime? @default(now())
  owner     User?     @relation("Document_owner", fields: [ownerId], references: [id])
  ownerId   String?   @map("owner")

  @@index([ownerId])
}

model Organization {
  id           String       @id @default(cuid())
  title        String       @default("")
  description  String       @default("")
  address      String       @default("")
  inn          String       @default("")
  ogrn         String       @default("")
  starsCount   Int?
  reviewsCount Int?
  jobVacancies JobVacancy[] @relation("JobVacancy_organisation")
  createdAt    DateTime?    @default(now())
}

model JobVacancy {
  id                    String        @id @default(cuid())
  title                 String        @default("")
  cover_id              String?
  cover_filesize        Int?
  cover_width           Int?
  cover_height          Int?
  cover_extension       String?
  priceFrom             String        @default("")
  priceTo               String        @default("")
  place                 String        @default("")
  dateFrom              String?
  dateTo                String?
  requireSelfEmployment Boolean       @default(false)
  summary               String        @default("")
  content               String        @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  organisation          Organization? @relation("JobVacancy_organisation", fields: [organisationId], references: [id])
  organisationId        String?       @map("organisation")
  skills                Skill[]       @relation("JobVacancy_skills")
  createdAt             DateTime?     @default(now())

  @@index([organisationId])
}

model CV {
  id        String    @id @default(cuid())
  user      User?     @relation("CV_user", fields: [userId], references: [id])
  userId    String?   @map("user")
  title     String    @default("")
  priceFrom String    @default("")
  priceTo   String    @default("")
  place     String    @default("")
  dateFrom  String?
  dateTo    String?
  summary   String    @default("")
  content   String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  skills    Skill[]   @relation("CV_skills")
  createdAt DateTime? @default(now())

  @@index([userId])
}

model Skill {
  id           String       @id @default(cuid())
  title        String       @default("")
  description  String       @default("")
  cvs          CV[]         @relation("CV_skills")
  jobVacancies JobVacancy[] @relation("JobVacancy_skills")
}

model Post {
  id        String    @id @default(cuid())
  title     String    @default("")
  content   String    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author    User?     @relation("Post_author", fields: [authorId], references: [id])
  authorId  String?   @map("author")
  createdAt DateTime? @default(now())
  tags      Tag[]     @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id          String @id @default(cuid())
  title       String @default("")
  description String @default("")
  posts       Post[] @relation("Post_tags")
}

model Story {
  id              String    @id @default(cuid())
  author          User?     @relation("Story_author", fields: [authorId], references: [id])
  authorId        String?   @map("author")
  thumb_id        String?
  thumb_filesize  Int?
  thumb_width     Int?
  thumb_height    Int?
  thumb_extension String?
  mediaUrl        String    @default("")
  title           String    @default("")
  description     String    @default("")
  createdAt       DateTime? @default(now())

  @@index([authorId])
}
