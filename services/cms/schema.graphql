# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  email: String
  phoneNumber: String
  password: PasswordState
  role: String
  createdAt: DateTime
  profile: UserProfile
  cvs(where: CVWhereInput! = {}, orderBy: [CVOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CVWhereUniqueInput): [CV!]
  cvsCount(where: CVWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  stories(where: StoryWhereInput! = {}, orderBy: [StoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoryWhereUniqueInput): [Story!]
  storiesCount(where: StoryWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
  phoneNumber: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  role: StringFilter
  createdAt: DateTimeNullableFilter
  profile: UserProfileWhereInput
  cvs: CVManyRelationFilter
  posts: PostManyRelationFilter
  stories: StoryManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CVManyRelationFilter {
  every: CVWhereInput
  some: CVWhereInput
  none: CVWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input StoryManyRelationFilter {
  every: StoryWhereInput
  some: StoryWhereInput
  none: StoryWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  email: String
  phoneNumber: String
  password: String
  role: String
  createdAt: DateTime
  profile: UserProfileRelateToOneForUpdateInput
  cvs: CVRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  stories: StoryRelateToManyForUpdateInput
}

input UserProfileRelateToOneForUpdateInput {
  create: UserProfileCreateInput
  connect: UserProfileWhereUniqueInput
  disconnect: Boolean
}

input CVRelateToManyForUpdateInput {
  disconnect: [CVWhereUniqueInput!]
  set: [CVWhereUniqueInput!]
  create: [CVCreateInput!]
  connect: [CVWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input StoryRelateToManyForUpdateInput {
  disconnect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  email: String
  phoneNumber: String
  password: String
  role: String
  createdAt: DateTime
  profile: UserProfileRelateToOneForCreateInput
  cvs: CVRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  stories: StoryRelateToManyForCreateInput
}

input UserProfileRelateToOneForCreateInput {
  create: UserProfileCreateInput
  connect: UserProfileWhereUniqueInput
}

input CVRelateToManyForCreateInput {
  create: [CVCreateInput!]
  connect: [CVWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input StoryRelateToManyForCreateInput {
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
}

type UserProfile {
  id: ID!
  firstName: String
  lastName: String
  middleName: String
  dateOfBirth: String
  user: User
}

input UserProfileWhereUniqueInput {
  id: ID
}

input UserProfileWhereInput {
  AND: [UserProfileWhereInput!]
  OR: [UserProfileWhereInput!]
  NOT: [UserProfileWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  middleName: StringFilter
  dateOfBirth: StringFilter
  user: UserWhereInput
}

input UserProfileOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  middleName: OrderDirection
  dateOfBirth: OrderDirection
}

input UserProfileUpdateInput {
  firstName: String
  lastName: String
  middleName: String
  dateOfBirth: String
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input UserProfileUpdateArgs {
  where: UserProfileWhereUniqueInput!
  data: UserProfileUpdateInput!
}

input UserProfileCreateInput {
  firstName: String
  lastName: String
  middleName: String
  dateOfBirth: String
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type CV {
  id: ID!
  user: User
  title: String
  summary: String
  content: CV_content_Document
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
  createdAt: DateTime
}

type CV_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CVWhereUniqueInput {
  id: ID
}

input CVWhereInput {
  AND: [CVWhereInput!]
  OR: [CVWhereInput!]
  NOT: [CVWhereInput!]
  id: IDFilter
  user: UserWhereInput
  title: StringFilter
  summary: StringFilter
  skills: SkillManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input SkillManyRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input CVOrderByInput {
  id: OrderDirection
  title: OrderDirection
  summary: OrderDirection
  createdAt: OrderDirection
}

input CVUpdateInput {
  user: UserRelateToOneForUpdateInput
  title: String
  summary: String
  content: JSON
  skills: SkillRelateToManyForUpdateInput
  createdAt: DateTime
}

input SkillRelateToManyForUpdateInput {
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input CVUpdateArgs {
  where: CVWhereUniqueInput!
  data: CVUpdateInput!
}

input CVCreateInput {
  user: UserRelateToOneForCreateInput
  title: String
  summary: String
  content: JSON
  skills: SkillRelateToManyForCreateInput
  createdAt: DateTime
}

input SkillRelateToManyForCreateInput {
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

type Skill {
  id: ID!
  title: String
  description: String
  cvs(where: CVWhereInput! = {}, orderBy: [CVOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CVWhereUniqueInput): [CV!]
  cvsCount(where: CVWhereInput! = {}): Int
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  cvs: CVManyRelationFilter
}

input SkillOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input SkillUpdateInput {
  title: String
  description: String
  cvs: CVRelateToManyForUpdateInput
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  title: String
  description: String
  cvs: CVRelateToManyForCreateInput
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  createdAt: DateTime
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  createdAt: DateTimeNullableFilter
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  tags: TagRelateToManyForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  tags: TagRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  title: String
  description: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input TagUpdateInput {
  title: String
  description: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  title: String
  description: String
  posts: PostRelateToManyForCreateInput
}

type Story {
  id: ID!
  author: User
  mediaUrl: String
  title: String
  description: String
  createdAt: DateTime
}

input StoryWhereUniqueInput {
  id: ID
}

input StoryWhereInput {
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
  id: IDFilter
  author: UserWhereInput
  mediaUrl: StringFilter
  title: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
}

input StoryOrderByInput {
  id: OrderDirection
  mediaUrl: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input StoryUpdateInput {
  author: UserRelateToOneForUpdateInput
  mediaUrl: String
  title: String
  description: String
  createdAt: DateTime
}

input StoryUpdateArgs {
  where: StoryWhereUniqueInput!
  data: StoryUpdateInput!
}

input StoryCreateInput {
  author: UserRelateToOneForCreateInput
  mediaUrl: String
  title: String
  description: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserProfile(data: UserProfileCreateInput!): UserProfile
  createUserProfiles(data: [UserProfileCreateInput!]!): [UserProfile]
  updateUserProfile(where: UserProfileWhereUniqueInput!, data: UserProfileUpdateInput!): UserProfile
  updateUserProfiles(data: [UserProfileUpdateArgs!]!): [UserProfile]
  deleteUserProfile(where: UserProfileWhereUniqueInput!): UserProfile
  deleteUserProfiles(where: [UserProfileWhereUniqueInput!]!): [UserProfile]
  createCV(data: CVCreateInput!): CV
  createCVS(data: [CVCreateInput!]!): [CV]
  updateCV(where: CVWhereUniqueInput!, data: CVUpdateInput!): CV
  updateCVS(data: [CVUpdateArgs!]!): [CV]
  deleteCV(where: CVWhereUniqueInput!): CV
  deleteCVS(where: [CVWhereUniqueInput!]!): [CV]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createStory(data: StoryCreateInput!): Story
  createStories(data: [StoryCreateInput!]!): [Story]
  updateStory(where: StoryWhereUniqueInput!, data: StoryUpdateInput!): Story
  updateStories(data: [StoryUpdateArgs!]!): [Story]
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteStories(where: [StoryWhereUniqueInput!]!): [Story]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  phoneNumber: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userProfiles(where: UserProfileWhereInput! = {}, orderBy: [UserProfileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserProfileWhereUniqueInput): [UserProfile!]
  userProfile(where: UserProfileWhereUniqueInput!): UserProfile
  userProfilesCount(where: UserProfileWhereInput! = {}): Int
  cVS(where: CVWhereInput! = {}, orderBy: [CVOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CVWhereUniqueInput): [CV!]
  cV(where: CVWhereUniqueInput!): CV
  cVSCount(where: CVWhereInput! = {}): Int
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  stories(where: StoryWhereInput! = {}, orderBy: [StoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoryWhereUniqueInput): [Story!]
  story(where: StoryWhereUniqueInput!): Story
  storiesCount(where: StoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
