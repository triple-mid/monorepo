# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  email: String
  phoneNumber: String
  password: PasswordState
  role: String
  createdAt: DateTime
  profile: UserProfile
  cvs(where: CVWhereInput! = {}, orderBy: [CVOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CVWhereUniqueInput): [CV!]
  cvsCount(where: CVWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  stories(where: StoryWhereInput! = {}, orderBy: [StoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoryWhereUniqueInput): [Story!]
  storiesCount(where: StoryWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
  phoneNumber: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  phoneNumber: StringFilter
  role: StringFilter
  createdAt: DateTimeNullableFilter
  profile: UserProfileWhereInput
  cvs: CVManyRelationFilter
  posts: PostManyRelationFilter
  stories: StoryManyRelationFilter
  documents: DocumentManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input CVManyRelationFilter {
  every: CVWhereInput
  some: CVWhereInput
  none: CVWhereInput
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input StoryManyRelationFilter {
  every: StoryWhereInput
  some: StoryWhereInput
  none: StoryWhereInput
}

input DocumentManyRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  phoneNumber: OrderDirection
  role: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  email: String
  phoneNumber: String
  password: String
  role: String
  createdAt: DateTime
  profile: UserProfileRelateToOneForUpdateInput
  cvs: CVRelateToManyForUpdateInput
  posts: PostRelateToManyForUpdateInput
  stories: StoryRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
}

input UserProfileRelateToOneForUpdateInput {
  create: UserProfileCreateInput
  connect: UserProfileWhereUniqueInput
  disconnect: Boolean
}

input CVRelateToManyForUpdateInput {
  disconnect: [CVWhereUniqueInput!]
  set: [CVWhereUniqueInput!]
  create: [CVCreateInput!]
  connect: [CVWhereUniqueInput!]
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input StoryRelateToManyForUpdateInput {
  disconnect: [StoryWhereUniqueInput!]
  set: [StoryWhereUniqueInput!]
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
}

input DocumentRelateToManyForUpdateInput {
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  email: String
  phoneNumber: String
  password: String
  role: String
  createdAt: DateTime
  profile: UserProfileRelateToOneForCreateInput
  cvs: CVRelateToManyForCreateInput
  posts: PostRelateToManyForCreateInput
  stories: StoryRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
}

input UserProfileRelateToOneForCreateInput {
  create: UserProfileCreateInput
  connect: UserProfileWhereUniqueInput
}

input CVRelateToManyForCreateInput {
  create: [CVCreateInput!]
  connect: [CVWhereUniqueInput!]
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input StoryRelateToManyForCreateInput {
  create: [StoryCreateInput!]
  connect: [StoryWhereUniqueInput!]
}

input DocumentRelateToManyForCreateInput {
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

type UserProfile {
  id: ID!
  firstName: String
  lastName: String
  middleName: String
  birth: CalendarDay
  photoUrl: ImageFieldOutput
  starsCount: Int
  reviewsCount: Int
  competitionLevel: Int
  competitionPoints: Int
  user: User
  achievements(where: AchievementWhereInput! = {}, orderBy: [AchievementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AchievementWhereUniqueInput): [Achievement!]
  achievementsCount(where: AchievementWhereInput! = {}): Int
}

scalar CalendarDay @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input UserProfileWhereUniqueInput {
  id: ID
}

input UserProfileWhereInput {
  AND: [UserProfileWhereInput!]
  OR: [UserProfileWhereInput!]
  NOT: [UserProfileWhereInput!]
  id: IDFilter
  firstName: StringFilter
  lastName: StringFilter
  middleName: StringFilter
  birth: CalendarDayNullableFilter
  starsCount: IntNullableFilter
  reviewsCount: IntNullableFilter
  competitionLevel: IntNullableFilter
  competitionPoints: IntNullableFilter
  user: UserWhereInput
  achievements: AchievementManyRelationFilter
}

input CalendarDayNullableFilter {
  equals: CalendarDay
  in: [CalendarDay!]
  notIn: [CalendarDay!]
  lt: CalendarDay
  lte: CalendarDay
  gt: CalendarDay
  gte: CalendarDay
  not: CalendarDayNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input AchievementManyRelationFilter {
  every: AchievementWhereInput
  some: AchievementWhereInput
  none: AchievementWhereInput
}

input UserProfileOrderByInput {
  id: OrderDirection
  firstName: OrderDirection
  lastName: OrderDirection
  middleName: OrderDirection
  birth: OrderDirection
  starsCount: OrderDirection
  reviewsCount: OrderDirection
  competitionLevel: OrderDirection
  competitionPoints: OrderDirection
}

input UserProfileUpdateInput {
  firstName: String
  lastName: String
  middleName: String
  birth: CalendarDay
  photoUrl: ImageFieldInput
  starsCount: Int
  reviewsCount: Int
  competitionLevel: Int
  competitionPoints: Int
  user: UserRelateToOneForUpdateInput
  achievements: AchievementRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input AchievementRelateToManyForUpdateInput {
  disconnect: [AchievementWhereUniqueInput!]
  set: [AchievementWhereUniqueInput!]
  create: [AchievementCreateInput!]
  connect: [AchievementWhereUniqueInput!]
}

input UserProfileUpdateArgs {
  where: UserProfileWhereUniqueInput!
  data: UserProfileUpdateInput!
}

input UserProfileCreateInput {
  firstName: String
  lastName: String
  middleName: String
  birth: CalendarDay
  photoUrl: ImageFieldInput
  starsCount: Int
  reviewsCount: Int
  competitionLevel: Int
  competitionPoints: Int
  user: UserRelateToOneForCreateInput
  achievements: AchievementRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input AchievementRelateToManyForCreateInput {
  create: [AchievementCreateInput!]
  connect: [AchievementWhereUniqueInput!]
}

type Achievement {
  id: ID!
  title: String
  description: String
  profile: UserProfile
}

input AchievementWhereUniqueInput {
  id: ID
}

input AchievementWhereInput {
  AND: [AchievementWhereInput!]
  OR: [AchievementWhereInput!]
  NOT: [AchievementWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  profile: UserProfileWhereInput
}

input AchievementOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input AchievementUpdateInput {
  title: String
  description: String
  profile: UserProfileRelateToOneForUpdateInput
}

input AchievementUpdateArgs {
  where: AchievementWhereUniqueInput!
  data: AchievementUpdateInput!
}

input AchievementCreateInput {
  title: String
  description: String
  profile: UserProfileRelateToOneForCreateInput
}

type Document {
  id: ID!
  title: String
  content: JSON
  createdAt: DateTime
  owner: User
}

input DocumentWhereUniqueInput {
  id: ID
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IDFilter
  title: StringFilter
  createdAt: DateTimeNullableFilter
  owner: UserWhereInput
}

input DocumentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
}

input DocumentUpdateInput {
  title: String
  content: JSON
  createdAt: DateTime
  owner: UserRelateToOneForUpdateInput
}

input DocumentUpdateArgs {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateInput!
}

input DocumentCreateInput {
  title: String
  content: JSON
  createdAt: DateTime
  owner: UserRelateToOneForCreateInput
}

type Organization {
  id: ID!
  title: String
  description: String
  address: String
  inn: String
  ogrn: String
  jobVacancies(where: JobVacancyWhereInput! = {}, orderBy: [JobVacancyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobVacancyWhereUniqueInput): [JobVacancy!]
  jobVacanciesCount(where: JobVacancyWhereInput! = {}): Int
  createdAt: DateTime
}

input OrganizationWhereUniqueInput {
  id: ID
}

input OrganizationWhereInput {
  AND: [OrganizationWhereInput!]
  OR: [OrganizationWhereInput!]
  NOT: [OrganizationWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  address: StringFilter
  inn: StringFilter
  ogrn: StringFilter
  jobVacancies: JobVacancyManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input JobVacancyManyRelationFilter {
  every: JobVacancyWhereInput
  some: JobVacancyWhereInput
  none: JobVacancyWhereInput
}

input OrganizationOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  address: OrderDirection
  inn: OrderDirection
  ogrn: OrderDirection
  createdAt: OrderDirection
}

input OrganizationUpdateInput {
  title: String
  description: String
  address: String
  inn: String
  ogrn: String
  jobVacancies: JobVacancyRelateToManyForUpdateInput
  createdAt: DateTime
}

input JobVacancyRelateToManyForUpdateInput {
  disconnect: [JobVacancyWhereUniqueInput!]
  set: [JobVacancyWhereUniqueInput!]
  create: [JobVacancyCreateInput!]
  connect: [JobVacancyWhereUniqueInput!]
}

input OrganizationUpdateArgs {
  where: OrganizationWhereUniqueInput!
  data: OrganizationUpdateInput!
}

input OrganizationCreateInput {
  title: String
  description: String
  address: String
  inn: String
  ogrn: String
  jobVacancies: JobVacancyRelateToManyForCreateInput
  createdAt: DateTime
}

input JobVacancyRelateToManyForCreateInput {
  create: [JobVacancyCreateInput!]
  connect: [JobVacancyWhereUniqueInput!]
}

type JobVacancy {
  id: ID!
  title: String
  priceFrom: String
  priceTo: String
  priceExact: String
  place: String
  dateFrom: CalendarDay
  dateTo: CalendarDay
  requireSelfEmployment: Boolean
  summary: String
  content: JobVacancy_content_Document
  organisation: Organization
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
  createdAt: DateTime
}

type JobVacancy_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input JobVacancyWhereUniqueInput {
  id: ID
}

input JobVacancyWhereInput {
  AND: [JobVacancyWhereInput!]
  OR: [JobVacancyWhereInput!]
  NOT: [JobVacancyWhereInput!]
  id: IDFilter
  title: StringFilter
  priceFrom: StringFilter
  priceTo: StringFilter
  priceExact: StringFilter
  place: StringFilter
  dateFrom: CalendarDayNullableFilter
  dateTo: CalendarDayNullableFilter
  requireSelfEmployment: BooleanFilter
  summary: StringFilter
  organisation: OrganizationWhereInput
  skills: SkillManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input SkillManyRelationFilter {
  every: SkillWhereInput
  some: SkillWhereInput
  none: SkillWhereInput
}

input JobVacancyOrderByInput {
  id: OrderDirection
  title: OrderDirection
  priceFrom: OrderDirection
  priceTo: OrderDirection
  priceExact: OrderDirection
  place: OrderDirection
  dateFrom: OrderDirection
  dateTo: OrderDirection
  requireSelfEmployment: OrderDirection
  summary: OrderDirection
  createdAt: OrderDirection
}

input JobVacancyUpdateInput {
  title: String
  priceFrom: String
  priceTo: String
  priceExact: String
  place: String
  dateFrom: CalendarDay
  dateTo: CalendarDay
  requireSelfEmployment: Boolean
  summary: String
  content: JSON
  organisation: OrganizationRelateToOneForUpdateInput
  skills: SkillRelateToManyForUpdateInput
  createdAt: DateTime
}

input OrganizationRelateToOneForUpdateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
  disconnect: Boolean
}

input SkillRelateToManyForUpdateInput {
  disconnect: [SkillWhereUniqueInput!]
  set: [SkillWhereUniqueInput!]
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

input JobVacancyUpdateArgs {
  where: JobVacancyWhereUniqueInput!
  data: JobVacancyUpdateInput!
}

input JobVacancyCreateInput {
  title: String
  priceFrom: String
  priceTo: String
  priceExact: String
  place: String
  dateFrom: CalendarDay
  dateTo: CalendarDay
  requireSelfEmployment: Boolean
  summary: String
  content: JSON
  organisation: OrganizationRelateToOneForCreateInput
  skills: SkillRelateToManyForCreateInput
  createdAt: DateTime
}

input OrganizationRelateToOneForCreateInput {
  create: OrganizationCreateInput
  connect: OrganizationWhereUniqueInput
}

input SkillRelateToManyForCreateInput {
  create: [SkillCreateInput!]
  connect: [SkillWhereUniqueInput!]
}

type CV {
  id: ID!
  user: User
  title: String
  priceFrom: String
  priceTo: String
  priceExact: String
  place: String
  dateFrom: CalendarDay
  dateTo: CalendarDay
  summary: String
  content: CV_content_Document
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skillsCount(where: SkillWhereInput! = {}): Int
  createdAt: DateTime
}

type CV_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CVWhereUniqueInput {
  id: ID
}

input CVWhereInput {
  AND: [CVWhereInput!]
  OR: [CVWhereInput!]
  NOT: [CVWhereInput!]
  id: IDFilter
  user: UserWhereInput
  title: StringFilter
  priceFrom: StringFilter
  priceTo: StringFilter
  priceExact: StringFilter
  place: StringFilter
  dateFrom: CalendarDayNullableFilter
  dateTo: CalendarDayNullableFilter
  summary: StringFilter
  skills: SkillManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input CVOrderByInput {
  id: OrderDirection
  title: OrderDirection
  priceFrom: OrderDirection
  priceTo: OrderDirection
  priceExact: OrderDirection
  place: OrderDirection
  dateFrom: OrderDirection
  dateTo: OrderDirection
  summary: OrderDirection
  createdAt: OrderDirection
}

input CVUpdateInput {
  user: UserRelateToOneForUpdateInput
  title: String
  priceFrom: String
  priceTo: String
  priceExact: String
  place: String
  dateFrom: CalendarDay
  dateTo: CalendarDay
  summary: String
  content: JSON
  skills: SkillRelateToManyForUpdateInput
  createdAt: DateTime
}

input CVUpdateArgs {
  where: CVWhereUniqueInput!
  data: CVUpdateInput!
}

input CVCreateInput {
  user: UserRelateToOneForCreateInput
  title: String
  priceFrom: String
  priceTo: String
  priceExact: String
  place: String
  dateFrom: CalendarDay
  dateTo: CalendarDay
  summary: String
  content: JSON
  skills: SkillRelateToManyForCreateInput
  createdAt: DateTime
}

type Skill {
  id: ID!
  title: String
  description: String
  cvs(where: CVWhereInput! = {}, orderBy: [CVOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CVWhereUniqueInput): [CV!]
  cvsCount(where: CVWhereInput! = {}): Int
  jobVacancies(where: JobVacancyWhereInput! = {}, orderBy: [JobVacancyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobVacancyWhereUniqueInput): [JobVacancy!]
  jobVacanciesCount(where: JobVacancyWhereInput! = {}): Int
}

input SkillWhereUniqueInput {
  id: ID
}

input SkillWhereInput {
  AND: [SkillWhereInput!]
  OR: [SkillWhereInput!]
  NOT: [SkillWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  cvs: CVManyRelationFilter
  jobVacancies: JobVacancyManyRelationFilter
}

input SkillOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input SkillUpdateInput {
  title: String
  description: String
  cvs: CVRelateToManyForUpdateInput
  jobVacancies: JobVacancyRelateToManyForUpdateInput
}

input SkillUpdateArgs {
  where: SkillWhereUniqueInput!
  data: SkillUpdateInput!
}

input SkillCreateInput {
  title: String
  description: String
  cvs: CVRelateToManyForCreateInput
  jobVacancies: JobVacancyRelateToManyForCreateInput
}

type Post {
  id: ID!
  title: String
  content: Post_content_Document
  author: User
  createdAt: DateTime
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  author: UserWhereInput
  createdAt: DateTimeNullableFilter
  tags: TagManyRelationFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
}

input PostUpdateInput {
  title: String
  content: JSON
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
  tags: TagRelateToManyForUpdateInput
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  content: JSON
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
  tags: TagRelateToManyForCreateInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  title: String
  description: String
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
}

input TagUpdateInput {
  title: String
  description: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  title: String
  description: String
  posts: PostRelateToManyForCreateInput
}

type Story {
  id: ID!
  author: User
  thumbUrl: ImageFieldOutput
  mediaUrl: String
  title: String
  description: String
  createdAt: DateTime
}

input StoryWhereUniqueInput {
  id: ID
}

input StoryWhereInput {
  AND: [StoryWhereInput!]
  OR: [StoryWhereInput!]
  NOT: [StoryWhereInput!]
  id: IDFilter
  author: UserWhereInput
  mediaUrl: StringFilter
  title: StringFilter
  description: StringFilter
  createdAt: DateTimeNullableFilter
}

input StoryOrderByInput {
  id: OrderDirection
  mediaUrl: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input StoryUpdateInput {
  author: UserRelateToOneForUpdateInput
  thumbUrl: ImageFieldInput
  mediaUrl: String
  title: String
  description: String
  createdAt: DateTime
}

input StoryUpdateArgs {
  where: StoryWhereUniqueInput!
  data: StoryUpdateInput!
}

input StoryCreateInput {
  author: UserRelateToOneForCreateInput
  thumbUrl: ImageFieldInput
  mediaUrl: String
  title: String
  description: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createUserProfile(data: UserProfileCreateInput!): UserProfile
  createUserProfiles(data: [UserProfileCreateInput!]!): [UserProfile]
  updateUserProfile(where: UserProfileWhereUniqueInput!, data: UserProfileUpdateInput!): UserProfile
  updateUserProfiles(data: [UserProfileUpdateArgs!]!): [UserProfile]
  deleteUserProfile(where: UserProfileWhereUniqueInput!): UserProfile
  deleteUserProfiles(where: [UserProfileWhereUniqueInput!]!): [UserProfile]
  createAchievement(data: AchievementCreateInput!): Achievement
  createAchievements(data: [AchievementCreateInput!]!): [Achievement]
  updateAchievement(where: AchievementWhereUniqueInput!, data: AchievementUpdateInput!): Achievement
  updateAchievements(data: [AchievementUpdateArgs!]!): [Achievement]
  deleteAchievement(where: AchievementWhereUniqueInput!): Achievement
  deleteAchievements(where: [AchievementWhereUniqueInput!]!): [Achievement]
  createDocument(data: DocumentCreateInput!): Document
  createDocuments(data: [DocumentCreateInput!]!): [Document]
  updateDocument(where: DocumentWhereUniqueInput!, data: DocumentUpdateInput!): Document
  updateDocuments(data: [DocumentUpdateArgs!]!): [Document]
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteDocuments(where: [DocumentWhereUniqueInput!]!): [Document]
  createOrganization(data: OrganizationCreateInput!): Organization
  createOrganizations(data: [OrganizationCreateInput!]!): [Organization]
  updateOrganization(where: OrganizationWhereUniqueInput!, data: OrganizationUpdateInput!): Organization
  updateOrganizations(data: [OrganizationUpdateArgs!]!): [Organization]
  deleteOrganization(where: OrganizationWhereUniqueInput!): Organization
  deleteOrganizations(where: [OrganizationWhereUniqueInput!]!): [Organization]
  createJobVacancy(data: JobVacancyCreateInput!): JobVacancy
  createJobVacancies(data: [JobVacancyCreateInput!]!): [JobVacancy]
  updateJobVacancy(where: JobVacancyWhereUniqueInput!, data: JobVacancyUpdateInput!): JobVacancy
  updateJobVacancies(data: [JobVacancyUpdateArgs!]!): [JobVacancy]
  deleteJobVacancy(where: JobVacancyWhereUniqueInput!): JobVacancy
  deleteJobVacancies(where: [JobVacancyWhereUniqueInput!]!): [JobVacancy]
  createCV(data: CVCreateInput!): CV
  createCVS(data: [CVCreateInput!]!): [CV]
  updateCV(where: CVWhereUniqueInput!, data: CVUpdateInput!): CV
  updateCVS(data: [CVUpdateArgs!]!): [CV]
  deleteCV(where: CVWhereUniqueInput!): CV
  deleteCVS(where: [CVWhereUniqueInput!]!): [CV]
  createSkill(data: SkillCreateInput!): Skill
  createSkills(data: [SkillCreateInput!]!): [Skill]
  updateSkill(where: SkillWhereUniqueInput!, data: SkillUpdateInput!): Skill
  updateSkills(data: [SkillUpdateArgs!]!): [Skill]
  deleteSkill(where: SkillWhereUniqueInput!): Skill
  deleteSkills(where: [SkillWhereUniqueInput!]!): [Skill]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createStory(data: StoryCreateInput!): Story
  createStories(data: [StoryCreateInput!]!): [Story]
  updateStory(where: StoryWhereUniqueInput!, data: StoryUpdateInput!): Story
  updateStories(data: [StoryUpdateArgs!]!): [Story]
  deleteStory(where: StoryWhereUniqueInput!): Story
  deleteStories(where: [StoryWhereUniqueInput!]!): [Story]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  phoneNumber: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  userProfiles(where: UserProfileWhereInput! = {}, orderBy: [UserProfileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserProfileWhereUniqueInput): [UserProfile!]
  userProfile(where: UserProfileWhereUniqueInput!): UserProfile
  userProfilesCount(where: UserProfileWhereInput! = {}): Int
  achievements(where: AchievementWhereInput! = {}, orderBy: [AchievementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AchievementWhereUniqueInput): [Achievement!]
  achievement(where: AchievementWhereUniqueInput!): Achievement
  achievementsCount(where: AchievementWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  document(where: DocumentWhereUniqueInput!): Document
  documentsCount(where: DocumentWhereInput! = {}): Int
  organizations(where: OrganizationWhereInput! = {}, orderBy: [OrganizationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OrganizationWhereUniqueInput): [Organization!]
  organization(where: OrganizationWhereUniqueInput!): Organization
  organizationsCount(where: OrganizationWhereInput! = {}): Int
  jobVacancies(where: JobVacancyWhereInput! = {}, orderBy: [JobVacancyOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: JobVacancyWhereUniqueInput): [JobVacancy!]
  jobVacancy(where: JobVacancyWhereUniqueInput!): JobVacancy
  jobVacanciesCount(where: JobVacancyWhereInput! = {}): Int
  cVS(where: CVWhereInput! = {}, orderBy: [CVOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CVWhereUniqueInput): [CV!]
  cV(where: CVWhereUniqueInput!): CV
  cVSCount(where: CVWhereInput! = {}): Int
  skills(where: SkillWhereInput! = {}, orderBy: [SkillOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SkillWhereUniqueInput): [Skill!]
  skill(where: SkillWhereUniqueInput!): Skill
  skillsCount(where: SkillWhereInput! = {}): Int
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  tags(where: TagWhereInput! = {}, orderBy: [TagOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TagWhereUniqueInput): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  stories(where: StoryWhereInput! = {}, orderBy: [StoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StoryWhereUniqueInput): [Story!]
  story(where: StoryWhereUniqueInput!): Story
  storiesCount(where: StoryWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
